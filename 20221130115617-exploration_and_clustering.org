:PROPERTIES:
:ID:       96769910-d0b7-4f7d-a240-1a91eb96d0fc
:END:
#+title: Exploration and clustering
#+date: [2022-11-30 Wed 11:56]
* Imports and path variables
** Imports

#+BEGIN_SRC python :session orgsession :async yes
  import pandas as pd
  from matplotlib import pyplot as plt
  import os
  import re
  import numpy as np
  from time import sleep
  from sklearn.cluster import AffinityPropagation as AF
  from sklearn.preprocessing import StandardScaler as SS
  from sklearn.cluster import KMeans
  from sklearn.decomposition import PCA
  # Plotly imports
  import plotly as py
  import plotly.graph_objs as go
  from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
#+END_SRC

#+RESULTS:

** Path Variables
#+BEGIN_SRC python :session orgsession :async yes
  data_file_path = "/home/arvid/dev/Aristotle/DataFiles/DataFiles/2022-11-28_shrtCLT/"
  data_files = os.listdir(data_file_path)
  cleaned_file_dir = "/home/arvid/dev/Aristotle/CleanedDataFiles/2022-11-28_shrtCLT/"
  full_clean_files = cleaned_file_dir + "Full/"
  gen_bus_files = "/home/arvid/dev/Aristotle/GeneratorBusFiles/"
  bus_file = "/home/arvid/dev/Aristotle/ARISTO_BUSES.txt"
  cleaned_list_dir = os.listdir(cleaned_file_dir)
  generating_unit_file = "/home/arvid/dev/Aristotle/ARISTO_GENERATING_UNITS.txt"
  cleaned_generator_folder = cleaned_file_dir + "Generators/"
  generator_files = os.listdir(cleaned_generator_folder)

#+END_SRC

#+RESULTS:

* Clustering
** Utility functions:
*** Makes loading dataframes more convenient...
#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  def get_gen_df(number,folder=cleaned_generator_folder, file_list=generator_files, index_col="Time:"):
    file = generator_files[number]
    path = folder + file
    return pd.read_csv(path, index_col=index_col, skipinitialspace=True)
#+END_SRC
*** Convenience function for dropping zeros and returning new df
#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  def drop_zeros(df):
    zero_cols = [col for col in df.columns if df[col].sum() == 0]
    df2 = df.drop(labels = zero_cols, axis=1)
    return df2
#+END_SRC

*** Conveniently show correlation matrix for df
#+begin_src python :session orgsession :async yes :pandoc t -n 1
  def show_corrmat(df):
      corr = df.corr()
      f = plt.figure(figsize=(20, 20))
      plt.matshow(corr, fignum=f.number)
      plt.xticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14, rotation=45)
      plt.yticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14)
      cb = plt.colorbar()
      cb.ax.tick_params(labelsize=14)
      plt.title('Correlation Matrix', fontsize=16);
#+END_SRC

*** Calculate stability index and find separated generators
#+BEGIN_SRC python :session orgsession :async yes :pandoc t
  def stab_index(df, lim=180, abs_clt=0, verbose=False,):
    """Caclulate the stability index of a df containing the rotor angles from a case"""
    sub = df.to_numpy()[abs_clt:, :]
    diff_mat = np.zeros([sub.shape[0], np.sum(np.arange(sub.shape[1]))])
    for i in range(sub.shape[1]):
      for j in range(i + 1, sub.shape[1]):
        diff_mat[:, i+j-1] = np.abs(sub[:,i] - sub[:,j])

    delta_max = np.max(np.max(diff_mat))
    separated = np.where(diff_mat >= lim)
    stab_ind = (lim - delta_max)/(lim + delta_max)
    if verbose:
      print(f"Stability index is {stab_ind}, maximum delta is {delta_max}")
    return stab_ind, separated
#+END_SRC

#+RESULTS:
*** Find the column numbers of a difference matrix
The difference matrix is defined in the stab index function, and is
defined as the matrix of differences of all columns in the dataframe
(used here to calculate the stability index, because it gives the
differences in rotor angle for all generators at all timesteps). It
will only be used in cases where the number of generators are known,
to avoid solving any quadratic equations
#+begin_src python :session orgsession :async yes :pandoc t
  def get_columns(idx, n_generators):
    i_map = np.insert( np.cumsum( np.arange(n_generators-1, 0, -1)) - 1, 0, 0) # -1 for appropriate python indexing
    gens = []
    #print(i_map)
    for i, j in enumerate(i_map):
      if idx <= j:
        gen1 = i - 1
        gen2 = idx - i_map[i-1] + 1
        break
    return [gen1, gen2]
#+end_src

#+RESULTS:

** Test clustering with one DF:
:LOGBOOK:
CLOCK: [2022-12-02 Fri 13:56]
:END:
#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df = get_gen_df(0)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn [6], line 1[0m
: [0;32m----> 1[0m df [38;5;241m=[39m [43mget_gen_df[49m([38;5;241m0[39m)
:
: [0;31mNameError[0m: name 'get_gen_df' is not defined
:END:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  dataset = df.values.T
  print(dataset.shape)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn [7], line 1[0m
: [0;32m----> 1[0m dataset [38;5;241m=[39m [43mdf[49m[38;5;241m.[39mvalues[38;5;241m.[39mT
: [1;32m      2[0m [38;5;28mprint[39m(dataset[38;5;241m.[39mshape)
:
: [0;31mNameError[0m: name 'df' is not defined
:END:

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  clstr = AF().fit(dataset)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn [8], line 1[0m
: [0;32m----> 1[0m clstr [38;5;241m=[39m [43mAF[49m()[38;5;241m.[39mfit(dataset)
:
: [0;31mNameError[0m: name 'AF' is not defined
:END:

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  labels = clstr.labels_
  print(labels)
  print(df.columns)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn [9], line 1[0m
: [0;32m----> 1[0m labels [38;5;241m=[39m [43mclstr[49m[38;5;241m.[39mlabels_
: [1;32m      2[0m [38;5;28mprint[39m(labels)
: [1;32m      3[0m [38;5;28mprint[39m(df[38;5;241m.[39mcolumns)
:
: [0;31mNameError[0m: name 'clstr' is not defined
:END:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  corr = df.corr()
  f = plt.figure(figsize=(20, 20))
  plt.matshow(corr, fignum=f.number)
  plt.xticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14, rotation=45)
  plt.yticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14)
  cb = plt.colorbar()
  cb.ax.tick_params(labelsize=14)
  plt.title('Correlation Matrix', fontsize=16);
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/a9b9b0ccd9e2cb55ec56f5735518e256d95fce4f.png]]

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 0:5].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn [11], line 1[0m
: [0;32m----> 1[0m [43mdf[49m[38;5;241m.[39miloc[:, [38;5;241m0[39m:[38;5;241m5[39m][38;5;241m.[39mplot(subplots[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
:
: [0;31mNameError[0m: name 'df' is not defined
:END:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 5:10].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn [12], line 1[0m
: [0;32m----> 1[0m [43mdf[49m[38;5;241m.[39miloc[:, [38;5;241m5[39m:[38;5;241m10[39m][38;5;241m.[39mplot(subplots[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
:
: [0;31mNameError[0m: name 'df' is not defined
:END:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 10:15].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn [13], line 1[0m
: [0;32m----> 1[0m [43mdf[49m[38;5;241m.[39miloc[:, [38;5;241m10[39m:[38;5;241m15[39m][38;5;241m.[39mplot(subplots[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
:
: [0;31mNameError[0m: name 'df' is not defined
:END:

: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/9eedb860f2943fb483621aa8ac42d5d525be3ff5.png]]
:END:
#+RESULTS:
:RESULTS:
: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/e5fc5ebf5862580ab76787711be1b9f20df5138f.png]]
:END:


#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 20:25].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn [14], line 1[0m
: [0;32m----> 1[0m [43mdf[49m[38;5;241m.[39miloc[:, [38;5;241m20[39m:[38;5;241m25[39m][38;5;241m.[39mplot(subplots[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
:
: [0;31mNameError[0m: name 'df' is not defined
:END:

: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/61004857a093c9e55ef0c337d404349112b5fd25.png]]
:END:
#+RESULTS:
:RESULTS:
: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/e5fc5ebf5862580ab76787711be1b9f20df5138f.png]]
:END:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 30:35].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn [15], line 1[0m
: [0;32m----> 1[0m [43mdf[49m[38;5;241m.[39miloc[:, [38;5;241m30[39m:[38;5;241m35[39m][38;5;241m.[39mplot(subplots[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
:
: [0;31mNameError[0m: name 'df' is not defined
:END:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 35:].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn [16], line 1[0m
: [0;32m----> 1[0m [43mdf[49m[38;5;241m.[39miloc[:, [38;5;241m35[39m:][38;5;241m.[39mplot(subplots[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
:
: [0;31mNameError[0m: name 'df' is not defined
:END:

** Test with unstable case:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  stab_path = "/home/arvid/dev/Aristotle/CleanedDataFiles/2022-11-28_shrtCLT/stability_data.csv"
  stability_df = pd.read_csv(stab_path,index_col=0)
#  unstab = stability_df[stability_df.iloc[1,:]==0]
#+END_SRC

#+RESULTS:

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  df = get_gen_df(8)
  print(stability_df.iloc[:,8])
#+end_src

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df2 = get_gen_df(1)
  df2 = drop_zeros(df2)
#+END_SRC

#+RESULTS:

#+begin_src python :session orgsession :async yes :pandoc t -n 1
show_corrmat(df2)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e177560363fdb6794b457de80a2a6176b0c2ba7f.png]]
