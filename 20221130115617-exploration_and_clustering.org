:PROPERTIES:
:ID:       96769910-d0b7-4f7d-a240-1a91eb96d0fc
:END:
#+title: Exploration and clustering
#+date: [2022-11-30 Wed 11:56]
* Imports and path variables
** Imports

#+BEGIN_SRC python :session orgsession :async yes
  import pandas as pd
  from matplotlib import pyplot as plt
  import os
  import re
  import numpy as np
  from time import sleep
  from sklearn.cluster import AffinityPropagation as AF
  from sklearn.preprocessing import StandardScaler as SS
  from sklearn.cluster import KMeans
  from sklearn.decomposition import PCA
  # Plotly imports
  import plotly as py
  import plotly.graph_objs as go
  from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
#+END_SRC

#+RESULTS:

** Path Variables
#+BEGIN_SRC python :session orgsession :async yes
  data_file_path = "/home/arvid/dev/Aristotle/DataFiles/DataFiles/2022-11-28_shrtCLT/"
  data_files = os.listdir(data_file_path)
  cleaned_file_dir = "/home/arvid/dev/Aristotle/CleanedDataFiles/2022-11-28_shrtCLT/"
  full_clean_dir = cleaned_file_dir + "Full/"
  gen_bus_files = "/home/arvid/dev/Aristotle/GeneratorBusFiles/"
  bus_file = "/home/arvid/dev/Aristotle/ARISTO_BUSES.txt"
  cleaned_list_dir = os.listdir(cleaned_file_dir)
  generating_unit_file = "/home/arvid/dev/Aristotle/ARISTO_GENERATING_UNITS.txt"
  cleaned_generator_folder = cleaned_file_dir + "Generators/"
  generator_files = os.listdir(cleaned_generator_folder)
  full_clean_files = os.listdir(full_clean_dir)
#+END_SRC

#+RESULTS:

* Clustering
** Utility functions:
*** Makes loading dataframes more convenient...
#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  def get_gen_df(number,folder=cleaned_generator_folder, file_list=generator_files, index_col="Time:"):
    file = file_list[number]
    path = folder + file
    return pd.read_csv(path, index_col=index_col, skipinitialspace=True)
#+END_SRC

#+RESULTS:

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  def get_full_df(number, folder=full_clean_dir, file_list=full_clean_files, index_col="Time:"):
    file = file_list[number]
    path = folder + file
    return pd.read_csv(path, index_col=index_col, skipinitialspace=True)
#+end_src

#+RESULTS:
**** Separate generator columns
#+BEGIN_SRC python :session orgsession :async yes
  def get_generator_cols(df, verbose=False):
    gen_cols = []
    for col in df.columns:
      try:
        if col.split("_", 1)[1] in generator_list:
          gen_cols.append(col)
      except:
        if verbose:
          print("One of the columns had a weird name, exception caught")
    gen_df = df[gen_cols]
   # print(gen_cols)
    df = df.drop(labels = gen_cols, axis=1)
    return gen_df, df
#+END_SRC

#+RESULTS:

*** Separate Generator buses
#+BEGIN_SRC python :session orgsession :async yes
  bus_file = "/home/arvid/dev/Aristotle/ARISTO_GEN_BUSES.txt"
  gen_bus_list = [] # List containing names of all generator buses
  with open(bus_file) as bf:
      for line in bf:
          gen_bus_list.append(line.strip())
      print(gen_bus_list)
  def find_gen_buses(df, gen_bus_list=gen_bus_list):
    gen_bus_labels = [col for col in df.columns if col.split("_",1)[1] in gen_bus_list]

    return df[gen_bus_labels], gen_bus_labels
#+END_SRC

#+RESULTS:
: ['CT11_A17_AGGAN', 'CT11_B17_AGGAN', 'AT121_A130_OLMAF', 'CT12_A130_STUPET', 'CT12_A400_STUPET', 'CT12_B400_STUPET', 'CT71_A400_JAURAS', 'CT71_B400_JAURAS', 'CT72_A400_HALLAN', 'CT72_B400_HALLAN', 'AT131_A130_STORF', 'CT22_A130_STORTR', 'CT21_A400_NJAGGO', 'AT241_A220_NORRS', 'CT31_A17_STENFOR', 'FT44_A20_KARNAN', 'FT44_B20_KARNAN', 'FT44_C20_KARNAN', 'FT41_A400_DALBO', 'FT47_A20_ERIKSH', 'FT47_B20_ERIKSH', 'RT131_A130_YTTER', 'RT132_A130_HASTS', 'FT62_A400_RUTHUV', 'FT62_B400_RUTHUV', 'FT63_A20_SYDBACK', 'FT63_B20_SYDBACK', 'FT51_B400_BLOCKE', 'FT51_A400_BLOCKE']

*** Convenience function for dropping zeros and returning new df
#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  def drop_zeros(df):
    zero_cols = [col for col in df.columns if df[col].sum() == 0]
    df2 = df.drop(labels = zero_cols, axis=1)
    return df2
#+END_SRC

#+RESULTS:

*** Conveniently show correlation matrix for df
#+begin_src python :session orgsession :async yes :pandoc t -n 1
  def show_corrmat(df):
      corr = df.corr()
      f = plt.figure(figsize=(20, 20))
      plt.matshow(corr, fignum=f.number)
      plt.xticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14, rotation=45)
      plt.yticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14)
      cb = plt.colorbar()
      cb.ax.tick_params(labelsize=14)
      plt.title('Correlation Matrix', fontsize=16);
#+END_SRC

#+RESULTS:


*** Show df as colormap
#+begin_src python :session orgsession :async yes :pandoc t -n 1
  def show_full_range(df, range=[220, 250]):
      df = df - df.mean()
      df = df.iloc[range[0]:range[1], :]
      corr = df.values.T
      f = plt.figure(figsize=(20, 20))
      plt.pcolor(corr, cmap="jet")
      #plt.xticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14, rotation=45)
      #plt.yticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14)
      cb = plt.colorbar()
      cb.ax.tick_params(labelsize=12)
      plt.title('Colormap, Rotor angles', fontsize=16);
#+END_SRC

#+RESULTS:
*** Show colormap of full bus df
#+begin_src python :session orgsession :async yes :pandoc t -n 1
  def show_full_bus_df(df, range=[220, 250]):
      #df = df - df.mean()
      channel_width = df.shape[1]/3
      df = df.iloc[range[0]:range[1], :]

      corr = df.values
      nsamples=corr.shape[0]
      nfeat=corr.shape[1]
      corr= corr.reshape([nsamples,int(nfeat/3),3]).transpose([1,0,2])
      #corr = corr.transpose([1,0,2])
      print(f"Corr has shape {corr.shape}")
      f = plt.figure(figsize=(20, 20))
      plt.imshow(corr, cmap="jet")
      #plt.xticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14, rotation=45)
      #plt.yticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14)
      #cb.ax.tick_params(labelsize=12)
      plt.title('PMU-data treated as RGB', fontsize=16);
#+END_SRC

#+RESULTS:

*** Find the column numbers of a difference matrix
The difference matrix is defined in the stab index function, and is
defined as the matrix of differences of all columns in the dataframe
(used here to calculate the stability index, because it gives the
differences in rotor angle for all generators at all timesteps). It
will only be used in cases where the number of generators are known,
to avoid solving any quadratic equations
#+begin_src python :session orgsession :async yes :pandoc t
  def get_columns(idx, n_generators):
    maxidx = n_generators * (n_generators -1)/2 - 1
    if idx > maxidx:
      raise Exception(f"Index {idx} out of range for {n_generators} generators, max index is {maxidx}!")
    #i_map = np.insert( np.cumsum( np.arange(n_generators-1, 0, -1)) - 1, 0, 0) # -1 for appropriate python indexing
    i_map = np.cumsum( np.arange(n_generators-1, 0, -1))
    gens = []
    #print(i_map)
    for i, j in enumerate(i_map):
      if idx < j:
        if i == 0:
          gen1 = i
          gen2 = idx + 1
        else:
          gen1 = i
          gen2 = idx - i_map[i - 1] + i + 1
        break
    return [gen1, gen2]
#+end_src

#+RESULTS:
*** Calculate stability index and find separated generators

#+BEGIN_SRC python :session orgsession :async yes :pandoc t
  def stab_index(df, lim=180, abs_clt=0, verbose=False,):
    """Caclulate the stability index of a df containing the rotor angles from a case"""
    sub = df.to_numpy()[abs_clt:, :]
    diff_mat = np.zeros([sub.shape[0], np.sum(np.arange(sub.shape[1]))])
    gen_pairs = []
    for i in range(sub.shape[1]):
      for j in range(i + 1, sub.shape[1]):
        diff_mat[:, i+j-1] = np.abs(sub[:,i] - sub[:,j])
        gen_pairs.append([i,j])
    print(f"Max value in stab mat is {np.max(diff_mat)}")
    delta_max = np.max(np.max(diff_mat))
    separated = np.where(diff_mat >= lim)
    stab_ind = (lim - delta_max)/(lim + delta_max)
    if verbose:
      print(f"Stability index is {stab_ind}, maximum delta is {delta_max}")
    return stab_ind, separated, diff_mat, gen_pairs
#+END_SRC

#+RESULTS:


** Test clustering with one DF:
:LOGBOOK:
CLOCK: [2022-12-02 Fri 13:56]
:END:
#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df = get_gen_df(0)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  dataset = df.values.T
  print(dataset.shape)
#+END_SRC

#+RESULTS:
: (39, 1002)

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  clstr = AF().fit(dataset)
#+end_src

#+RESULTS:

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  labels = clstr.labels_
  print(labels)
  print(df.columns)
#+end_src

#+RESULTS:
#+begin_example
  [1 1 1 1 0 0 0 0 0 0 0 0 1 3 1 1 0 0 1 1 0 1 1 1 1 1 2 0 3 3 3 3 3 3 2 2 1
   3 0]
  Index(['VA_AGGAN_G1', 'VA_AGGAN_G2', 'VA_ATOMSBERG_G1', 'VA_BLOCKET_G1',
         'VA_BLOCKET_G2', 'VA_DALBO_G1', 'VA_ERIKSHAMN_G1', 'VA_ERIKSHAMN_G2',
         'VA_HAMMARVATTNET_G1', 'VA_HALLAN_G1', 'VA_HALLAN_G2', 'VA_HALLAN_G3',
         'VA_HALLAN_G4', 'VA_HASTSJO_G1', 'VA_HASTSJO_G2', 'VA_JAURAS_G1',
         'VA_KARNAN_G1', 'VA_KARNAN_G2', 'VA_KARNAN_G3', 'VA_NJAGGO_G1',
         'VA_NORRSELE_G1', 'VA_NORRSELE_G2', 'VA_OLMAFALLET_G1',
         'VA_RUTHUVUD_G1', 'VA_RUTHUVUD_G2', 'VA_RUTHUVUD_G3',
         'VA_STENFORSEN_G1', 'VA_STORFORS_G1', 'VA_STORTRASK_G1', 'VA_STORAN_G1',
         'VA_STUPET_G1', 'VA_STUPET_G2', 'VA_STUPET_G3', 'VA_STUPET_G4',
         'VA_SYDBACK_G1', 'VA_SYDBACK_G2', 'VA_TROLLFALLEN_G1',
         'VA_VATTENDRAGET_G1', 'VA_YTTERFORSEN_G1'],
        dtype='object')
#+end_example

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  corr = df.corr()
  f = plt.figure(figsize=(20, 20))
  plt.matshow(corr, fignum=f.number)
  plt.xticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14, rotation=45)
  plt.yticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14)
  cb = plt.colorbar()
  cb.ax.tick_params(labelsize=14)
  plt.title('Correlation Matrix', fontsize=16);
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/6bc1f0e7d58757434a2a24f45bc15112f2394c51.png]]

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 0:5].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/1458790a47a48ed1012a07360d201e4bf964707b.png]]
:END:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 5:10].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/e5fc5ebf5862580ab76787711be1b9f20df5138f.png]]
:END:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 10:15].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/9eedb860f2943fb483621aa8ac42d5d525be3ff5.png]]
:END:

: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/9eedb860f2943fb483621aa8ac42d5d525be3ff5.png]]
:END:
#+RESULTS:
:RESULTS:
: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/e5fc5ebf5862580ab76787711be1b9f20df5138f.png]]
:END:


#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 20:25].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/61004857a093c9e55ef0c337d404349112b5fd25.png]]
:END:

: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/61004857a093c9e55ef0c337d404349112b5fd25.png]]
:END:
#+RESULTS:
:RESULTS:
: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/e5fc5ebf5862580ab76787711be1b9f20df5138f.png]]
:END:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 30:35].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>], dtype=object)
[[file:./.ob-jupyter/c78664c14177725c1d46ea8d3af80692720bbe7b.png]]
:END:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df.iloc[:, 35:].plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: array([<AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>,
:        <AxesSubplot: xlabel='Time:'>, <AxesSubplot: xlabel='Time:'>],
:       dtype=object)
[[file:./.ob-jupyter/f3458756cc748e4e9e3771708d35974a8e2e3956.png]]
:END:

** Test with unstable case:

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  stab_path = "/home/arvid/dev/Aristotle/CleanedDataFiles/2022-11-28_shrtCLT/stability_data.csv"
  stability_df = pd.read_csv(stab_path,index_col=0)
#  unstab = stability_df[stability_df.iloc[1,:]==0]
#+END_SRC

#+RESULTS:

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  df = get_gen_df(8)
  print(stability_df.iloc[:,8])
#+end_src

#+RESULTS:
: 0   -0.146852
: 1    0.000000
: Name: Bus_AT131_A130_STORF_CLT:10_FT:157__Load:_1.05.csv, dtype: float64

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  df2 = get_gen_df(1)
  df2 = drop_zeros(df2)
#+END_SRC

#+RESULTS:

#+begin_src python :session orgsession :async yes :pandoc t -n 1
show_corrmat(df2)
#+end_src



#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
    df = get_gen_df(8)
    df = drop_zeros(df)
    stab, sep, diffmat, gen_pairs = stab_index(df)
    #print(sep)
    exes = list(set(sep[1]))
    print(exes)
    print(get_columns(51, df.shape[1]))
    print(get_columns(52, df.shape[1]))
    print(get_columns(54, df.shape[1]))
    print(df.columns[1])
    print(df.columns[18])
    print(df.columns[19])
    print(df.columns[21])
  print(stab)
#+END_src

#+RESULTS:
: Max value in stab mat is 241.96640000000002
: [51, 52, 54]
: [1, 18]
: [1, 19]
: [1, 21]
: VA_AGGAN_G2
: VA_NJAGGO_G1
: VA_NORRSELE_G1
: VA_OLMAFALLET_G1
: -0.14685150286847487


#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
print(gen_pairs)
#+END_SRC

#+RESULTS:
: [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 25], [0, 26], [0, 27], [0, 28], [0, 29], [0, 30], [0, 31], [0, 32], [0, 33], [0, 34], [0, 35], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [1, 27], [1, 28], [1, 29], [1, 30], [1, 31], [1, 32], [1, 33], [1, 34], [1, 35], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 27], [2, 28], [2, 29], [2, 30], [2, 31], [2, 32], [2, 33], [2, 34], [2, 35], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 20], [3, 21], [3, 22], [3, 23], [3, 24], [3, 25], [3, 26], [3, 27], [3, 28], [3, 29], [3, 30], [3, 31], [3, 32], [3, 33], [3, 34], [3, 35], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 23], [4, 24], [4, 25], [4, 26], [4, 27], [4, 28], [4, 29], [4, 30], [4, 31], [4, 32], [4, 33], [4, 34], [4, 35], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 20], [5, 21], [5, 22], [5, 23], [5, 24], [5, 25], [5, 26], [5, 27], [5, 28], [5, 29], [5, 30], [5, 31], [5, 32], [5, 33], [5, 34], [5, 35], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 20], [6, 21], [6, 22], [6, 23], [6, 24], [6, 25], [6, 26], [6, 27], [6, 28], [6, 29], [6, 30], [6, 31], [6, 32], [6, 33], [6, 34], [6, 35], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 20], [7, 21], [7, 22], [7, 23], [7, 24], [7, 25], [7, 26], [7, 27], [7, 28], [7, 29], [7, 30], [7, 31], [7, 32], [7, 33], [7, 34], [7, 35], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 20], [8, 21], [8, 22], [8, 23], [8, 24], [8, 25], [8, 26], [8, 27], [8, 28], [8, 29], [8, 30], [8, 31], [8, 32], [8, 33], [8, 34], [8, 35], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 20], [9, 21], [9, 22], [9, 23], [9, 24], [9, 25], [9, 26], [9, 27], [9, 28], [9, 29], [9, 30], [9, 31], [9, 32], [9, 33], [9, 34], [9, 35], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 20], [10, 21], [10, 22], [10, 23], [10, 24], [10, 25], [10, 26], [10, 27], [10, 28], [10, 29], [10, 30], [10, 31], [10, 32], [10, 33], [10, 34], [10, 35], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 20], [11, 21], [11, 22], [11, 23], [11, 24], [11, 25], [11, 26], [11, 27], [11, 28], [11, 29], [11, 30], [11, 31], [11, 32], [11, 33], [11, 34], [11, 35], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 20], [12, 21], [12, 22], [12, 23], [12, 24], [12, 25], [12, 26], [12, 27], [12, 28], [12, 29], [12, 30], [12, 31], [12, 32], [12, 33], [12, 34], [12, 35], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 20], [13, 21], [13, 22], [13, 23], [13, 24], [13, 25], [13, 26], [13, 27], [13, 28], [13, 29], [13, 30], [13, 31], [13, 32], [13, 33], [13, 34], [13, 35], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 20], [14, 21], [14, 22], [14, 23], [14, 24], [14, 25], [14, 26], [14, 27], [14, 28], [14, 29], [14, 30], [14, 31], [14, 32], [14, 33], [14, 34], [14, 35], [15, 16], [15, 17], [15, 18], [15, 19], [15, 20], [15, 21], [15, 22], [15, 23], [15, 24], [15, 25], [15, 26], [15, 27], [15, 28], [15, 29], [15, 30], [15, 31], [15, 32], [15, 33], [15, 34], [15, 35], [16, 17], [16, 18], [16, 19], [16, 20], [16, 21], [16, 22], [16, 23], [16, 24], [16, 25], [16, 26], [16, 27], [16, 28], [16, 29], [16, 30], [16, 31], [16, 32], [16, 33], [16, 34], [16, 35], [17, 18], [17, 19], [17, 20], [17, 21], [17, 22], [17, 23], [17, 24], [17, 25], [17, 26], [17, 27], [17, 28], [17, 29], [17, 30], [17, 31], [17, 32], [17, 33], [17, 34], [17, 35], [18, 19], [18, 20], [18, 21], [18, 22], [18, 23], [18, 24], [18, 25], [18, 26], [18, 27], [18, 28], [18, 29], [18, 30], [18, 31], [18, 32], [18, 33], [18, 34], [18, 35], [19, 20], [19, 21], [19, 22], [19, 23], [19, 24], [19, 25], [19, 26], [19, 27], [19, 28], [19, 29], [19, 30], [19, 31], [19, 32], [19, 33], [19, 34], [19, 35], [20, 21], [20, 22], [20, 23], [20, 24], [20, 25], [20, 26], [20, 27], [20, 28], [20, 29], [20, 30], [20, 31], [20, 32], [20, 33], [20, 34], [20, 35], [21, 22], [21, 23], [21, 24], [21, 25], [21, 26], [21, 27], [21, 28], [21, 29], [21, 30], [21, 31], [21, 32], [21, 33], [21, 34], [21, 35], [22, 23], [22, 24], [22, 25], [22, 26], [22, 27], [22, 28], [22, 29], [22, 30], [22, 31], [22, 32], [22, 33], [22, 34], [22, 35], [23, 24], [23, 25], [23, 26], [23, 27], [23, 28], [23, 29], [23, 30], [23, 31], [23, 32], [23, 33], [23, 34], [23, 35], [24, 25], [24, 26], [24, 27], [24, 28], [24, 29], [24, 30], [24, 31], [24, 32], [24, 33], [24, 34], [24, 35], [25, 26], [25, 27], [25, 28], [25, 29], [25, 30], [25, 31], [25, 32], [25, 33], [25, 34], [25, 35], [26, 27], [26, 28], [26, 29], [26, 30], [26, 31], [26, 32], [26, 33], [26, 34], [26, 35], [27, 28], [27, 29], [27, 30], [27, 31], [27, 32], [27, 33], [27, 34], [27, 35], [28, 29], [28, 30], [28, 31], [28, 32], [28, 33], [28, 34], [28, 35], [29, 30], [29, 31], [29, 32], [29, 33], [29, 34], [29, 35], [30, 31], [30, 32], [30, 33], [30, 34], [30, 35], [31, 32], [31, 33], [31, 34], [31, 35], [32, 33], [32, 34], [32, 35], [33, 34], [33, 35], [34, 35]]

#+RESULTS:
: 180.649

#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  pairs = []
  for i in np.arange(int(36*35/2)-1):
      pairs.append(get_columns(i,36))
  pairs.append([34,35])
  print(f"Gen pairs is {np.array(gen_pairs).shape} and pairs is {np.array(pairs).shape}")
      #+END_SRC

      #+RESULTS:
      :RESULTS:
      #+begin_src python :session orgsession :async yes :pandoc t -n 1
        print(pairs)
      #+end_src
      : Gen pairs is (630, 2) and pairs is (630, 2)
      :END:
#+RESULTS:
: [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 25], [0, 26], [0, 27], [0, 28], [0, 29], [0, 30], [0, 31], [0, 32], [0, 33], [0, 34], [0, 35], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [1, 27], [1, 28], [1, 29], [1, 30], [1, 31], [1, 32], [1, 33], [1, 34], [1, 35], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 27], [2, 28], [2, 29], [2, 30], [2, 31], [2, 32], [2, 33], [2, 34], [2, 35], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 20], [3, 21], [3, 22], [3, 23], [3, 24], [3, 25], [3, 26], [3, 27], [3, 28], [3, 29], [3, 30], [3, 31], [3, 32], [3, 33], [3, 34], [3, 35], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 23], [4, 24], [4, 25], [4, 26], [4, 27], [4, 28], [4, 29], [4, 30], [4, 31], [4, 32], [4, 33], [4, 34], [4, 35], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 20], [5, 21], [5, 22], [5, 23], [5, 24], [5, 25], [5, 26], [5, 27], [5, 28], [5, 29], [5, 30], [5, 31], [5, 32], [5, 33], [5, 34], [5, 35], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 20], [6, 21], [6, 22], [6, 23], [6, 24], [6, 25], [6, 26], [6, 27], [6, 28], [6, 29], [6, 30], [6, 31], [6, 32], [6, 33], [6, 34], [6, 35], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 20], [7, 21], [7, 22], [7, 23], [7, 24], [7, 25], [7, 26], [7, 27], [7, 28], [7, 29], [7, 30], [7, 31], [7, 32], [7, 33], [7, 34], [7, 35], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 20], [8, 21], [8, 22], [8, 23], [8, 24], [8, 25], [8, 26], [8, 27], [8, 28], [8, 29], [8, 30], [8, 31], [8, 32], [8, 33], [8, 34], [8, 35], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 20], [9, 21], [9, 22], [9, 23], [9, 24], [9, 25], [9, 26], [9, 27], [9, 28], [9, 29], [9, 30], [9, 31], [9, 32], [9, 33], [9, 34], [9, 35], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 20], [10, 21], [10, 22], [10, 23], [10, 24], [10, 25], [10, 26], [10, 27], [10, 28], [10, 29], [10, 30], [10, 31], [10, 32], [10, 33], [10, 34], [10, 35], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 20], [11, 21], [11, 22], [11, 23], [11, 24], [11, 25], [11, 26], [11, 27], [11, 28], [11, 29], [11, 30], [11, 31], [11, 32], [11, 33], [11, 34], [11, 35], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 20], [12, 21], [12, 22], [12, 23], [12, 24], [12, 25], [12, 26], [12, 27], [12, 28], [12, 29], [12, 30], [12, 31], [12, 32], [12, 33], [12, 34], [12, 35], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 20], [13, 21], [13, 22], [13, 23], [13, 24], [13, 25], [13, 26], [13, 27], [13, 28], [13, 29], [13, 30], [13, 31], [13, 32], [13, 33], [13, 34], [13, 35], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 20], [14, 21], [14, 22], [14, 23], [14, 24], [14, 25], [14, 26], [14, 27], [14, 28], [14, 29], [14, 30], [14, 31], [14, 32], [14, 33], [14, 34], [14, 35], [15, 16], [15, 17], [15, 18], [15, 19], [15, 20], [15, 21], [15, 22], [15, 23], [15, 24], [15, 25], [15, 26], [15, 27], [15, 28], [15, 29], [15, 30], [15, 31], [15, 32], [15, 33], [15, 34], [15, 35], [16, 17], [16, 18], [16, 19], [16, 20], [16, 21], [16, 22], [16, 23], [16, 24], [16, 25], [16, 26], [16, 27], [16, 28], [16, 29], [16, 30], [16, 31], [16, 32], [16, 33], [16, 34], [16, 35], [17, 18], [17, 19], [17, 20], [17, 21], [17, 22], [17, 23], [17, 24], [17, 25], [17, 26], [17, 27], [17, 28], [17, 29], [17, 30], [17, 31], [17, 32], [17, 33], [17, 34], [17, 35], [18, 19], [18, 20], [18, 21], [18, 22], [18, 23], [18, 24], [18, 25], [18, 26], [18, 27], [18, 28], [18, 29], [18, 30], [18, 31], [18, 32], [18, 33], [18, 34], [18, 35], [19, 20], [19, 21], [19, 22], [19, 23], [19, 24], [19, 25], [19, 26], [19, 27], [19, 28], [19, 29], [19, 30], [19, 31], [19, 32], [19, 33], [19, 34], [19, 35], [20, 21], [20, 22], [20, 23], [20, 24], [20, 25], [20, 26], [20, 27], [20, 28], [20, 29], [20, 30], [20, 31], [20, 32], [20, 33], [20, 34], [20, 35], [21, 22], [21, 23], [21, 24], [21, 25], [21, 26], [21, 27], [21, 28], [21, 29], [21, 30], [21, 31], [21, 32], [21, 33], [21, 34], [21, 35], [22, 23], [22, 24], [22, 25], [22, 26], [22, 27], [22, 28], [22, 29], [22, 30], [22, 31], [22, 32], [22, 33], [22, 34], [22, 35], [23, 24], [23, 25], [23, 26], [23, 27], [23, 28], [23, 29], [23, 30], [23, 31], [23, 32], [23, 33], [23, 34], [23, 35], [24, 25], [24, 26], [24, 27], [24, 28], [24, 29], [24, 30], [24, 31], [24, 32], [24, 33], [24, 34], [24, 35], [25, 26], [25, 27], [25, 28], [25, 29], [25, 30], [25, 31], [25, 32], [25, 33], [25, 34], [25, 35], [26, 27], [26, 28], [26, 29], [26, 30], [26, 31], [26, 32], [26, 33], [26, 34], [26, 35], [27, 28], [27, 29], [27, 30], [27, 31], [27, 32], [27, 33], [27, 34], [27, 35], [28, 29], [28, 30], [28, 31], [28, 32], [28, 33], [28, 34], [28, 35], [29, 30], [29, 31], [29, 32], [29, 33], [29, 34], [29, 35], [30, 31], [30, 32], [30, 33], [30, 34], [30, 35], [31, 32], [31, 33], [31, 34], [31, 35], [32, 33], [32, 34], [32, 35], [33, 34], [33, 35]]
#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  np.allclose(np.array(gen_pairs), np.array(pairs))
#+END_SRC

#+RESULTS:
: True
#+BEGIN_SRC python :session orgsession :async yes :pandoc t -n 1
  rows, cols = np.where(diffmat > 180)

  for i in zip(rows, cols):
      print(i)
      print(get_columns(i[1], len(df.columns)))
      print(diffmat[i])
      print(df.iloc[176,1] - df.iloc[176,19])
#+END_SRC

#+begin_src python :session orgsession :async yes :pandoc t -n 1

  df.plot()
#+end_src

#+RESULTS:
:RESULTS:
: <AxesSubplot: xlabel='Time:'>
[[file:./.ob-jupyter/246e1b94b9087cd882e2f620bc934d6e28cec7d7.png]]
:END:


#+begin_src python :session orgsession :async yes :pandoc t -n 1
show_corrmat(df)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/98afc206bbda10ff61c9dd70cc3cb1a1477de37d.png]]

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  df.std()
#+end_src

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  unstable_list = np.where(stability_df.iloc[1,:] == 0)[0]
  print(unstable_list.shape)
  print(stability_df.iloc[:,10])
#+end_src

#+RESULTS:
: (209,)
: 0   -0.158291
: 1    0.000000
: Name: Bus_AT131_A130_STORF_CLT:7_FT:236__Load:_1.07.csv, dtype: float64

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  case = 10
  casenr = unstable_list[case]
  print(stability_df.columns[casenr])
  df2 = get_gen_df(unstable_list[case])
  df2.plot()
  show_corrmat(df2)
#+end_src

#+RESULTS:
:RESULTS:
: Bus_CT22_B400_STORTR_CLT:10_FT:249__Load:_1.07.csv
[[file:./.ob-jupyter/e3c3f58b6216d662f6a46e45de98d79d586f341f.png]]
[[file:./.ob-jupyter/337c3061b977cd9eb5fecba4523587ee914528af.png]]
:END:


#+begin_src python :session orgsession :async yes :pandoc t -n 1
show_full_range(df2, [230, 310])
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/bad301c6ba72856f89f0c237306691249fd68af0.png]]


#+begin_src python :session orgsession :async yes :pandoc t -n 1
  df3 = get_gen_df(2)
  print(generator_files[3])
  show_full_range(df3, [155, 155+80])
#+end_src

#+RESULTS:
:RESULTS:
: Bus_AT111_A130_VATTE_CLT:9_FT:166__Load:_1.05.csv
[[file:./.ob-jupyter/82d8876b14ca675bb6d09761573b1e1173e7794f.png]]
:END:

#+begin_src python :session orgsession :async yes :pandoc t -n 1
  ndf = get_full_df(10)
  _, full = get_generator_cols(ndf)
  full = calculate_va_der(full)
  full_gen, gen_labels = find_gen_buses(full)
#+end_src

#+RESULTS:
: Rows before dropping na: 1002
: Rows after dropping na: 1002


#+begin_src python :session orgsession :async yes :pandoc t -n 1
def calc_derivative(col, h):
    return col.diff()/h

def calculate_va_der(df, h=0.02): #frequency is 50 Hz so finite difference uses h=1/50==0.02
    cols = [df]
    for col in df.columns:
        csplit = col.split('_', 1)

        if csplit[0] == 'VA': # Only want derivative of voltage angle
            der_col = 'VAder_' + csplit[1]
            cols.append(calc_derivative(df[col], h).rename(der_col))
    newdf = pd.concat(cols, axis=1)
    print(f"Rows before dropping na: {df.shape[0]}")
    newdf.dropna(axis=0, how='any', inplace=True)
    print(f"Rows after dropping na: {df.shape[0]}")
    return newdf
#+end_src

#+RESULTS:

#+begin_src python :session orgsession :async yes :pandoc t -n 1
print(gen_labels)
#+end_src



#+begin_src python :session orgsession :async yes :pandoc t -n 1
  full_gen_normed = pd.DataFrame(SS().fit_transform(full_gen))
  show_full_bus_df(full_gen_normed, [220,310])
#+end_src

#+RESULTS:
:RESULTS:
: Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
: Corr has shape (27, 90, 3)
[[file:./.ob-jupyter/ad60e2cab4015a8ec73c17c361fcbc60e8378139.png]]
:END:
